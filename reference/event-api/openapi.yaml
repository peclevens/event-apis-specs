openapi: 3.0.0
info:
  title: Event API
  version: '1.0'
  description: Event management API
  contact:
    name: Clivens Petit
    url: 'https://www.linkedin.com/in/peclevens'
    email: clivens.petit@magicsoftbay.com
  license:
    name: GNU GPLv3
    url: 'https://github.com/peclevens/event-apis-specs/blob/master/LICENSE'
servers:
  - url: 'http://{environment}.events.clivenspetit.com:{port}/{basePath}'
    description: API server
    variables:
      environment:
        enum:
          - test
          - dev
          - qa
          - prod
        default: dev
        description: API running environment
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
      basePath:
        default: v1
paths:
  /events:
    get:
      summary: List all event
      description: List all event
      operationId: getAllEvents
      tags:
        - Event
      parameters:
        - $ref: ../common/models/parameters.v1.yaml#/offset
        - $ref: ../common/models/parameters.v1.yaml#/limit
        - $ref: ../common/models/parameters.v1.yaml#/sort
        - $ref: ../common/models/parameters.v1.yaml#/query
        - $ref: ../common/models/parameters.v1.yaml#/fields
      responses:
        '200':
          description: OK
          headers:
            X-RateLimit-Limit:
              $ref: ../common/models/headers.v1.yaml#/X-RateLimit-Limit
            X-RateLimit-Remaining:
              $ref: ../common/models/headers.v1.yaml#/X-RateLimit-Remaining
            X-RateLimit-Reset:
              $ref: ../common/models/headers.v1.yaml#/X-RateLimit-Reset
          content:
            application/json:
              schema:
                $ref: ./models/eventpage.v1.json
        '429':
          $ref: ../common/models/responses.v1.yaml#/429TooManyRequests
        '503':
          $ref: ../common/models/responses.v1.yaml#/503ServiceUnavailable
        'default':
          $ref: ../common/models/responses.v1.yaml#/default
    post:
      summary: Create new event
      description: Create new event
      operationId: createEvent
      tags:
        - Event
      responses:
        '201':
          description: Event created
          headers:
            X-RateLimit-Limit:
              $ref: ../common/models/headers.v1.yaml#/X-RateLimit-Limit
            X-RateLimit-Remaining:
              $ref: ../common/models/headers.v1.yaml#/X-RateLimit-Remaining
            X-RateLimit-Reset:
              $ref: ../common/models/headers.v1.yaml#/X-RateLimit-Reset
          content:
            application/json:
              schema:
                $ref: ./models/id.v1.json
        '409':
          $ref: ../common/models/responses.v1.yaml#/409Conflict
        '422':
          $ref: ../common/models/responses.v1.yaml#/422UnprocessableEntity
        '429':
          $ref: ../common/models/responses.v1.yaml#/429TooManyRequests
        '503':
          $ref: ../common/models/responses.v1.yaml#/503ServiceUnavailable
        'default':
          $ref: ../common/models/responses.v1.yaml#/default
      requestBody:
        description: Event creation request
        content:
          application/json:
            schema:
              $ref: ./models/createevent.v1.json
    delete:
      summary: Delete all events
      description: Delete all events
      operationId: deleteAllEvent
      tags:
        - Event
      responses:
        '204':
          description: No Content
  '/events/{id}':
    parameters:
      - name: id
        in: path
        schema:
          type: string
        description: Event id
        required: true
    get:
      summary: Get event by id
      description: Get event by id
      operationId: getEventById
      tags:
        - Event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/event.v1.json
    delete:
      summary: Delete event by id
      description: Delete event by id
      operationId: deleteEventById
      tags:
        - Event
      responses:
        '204':
          description: No Content
    put:
      summary: Update event
      description: Update event
      operationId: updateEventById
      tags:
        - Event
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/event.v1.json
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/event.v1.json
  '/events/{id}/sessions':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Event id
    get:
      summary: Get all sessions for a particular event
      description: Get all sessions for a particular event
      operationId: getSessionsByEventId
      tags: 
        - Session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/session.v1.json
    delete:
      summary: Delete all sessions for a particular event
      description: Delete all sessions for a particular event
      operationId: deleteAllSessionsByEventId
      tags:
        - Session
      responses:
        '204':
          description: No Content
    post:
      summary: Create a session for a particular event
      description: Create a session for a particular event
      operationId: createSession
      tags:
        - Session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/id.v1.json
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/createsession.v1.json
  '/events/sessions/{id}':
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
        description: Session id
    get:
      summary: Get session by id
      description: Get session by id
      operationId: getSessionById
      tags:
        - Session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/session.v1.json
    put:
      summary: Update a session
      description: Update a session
      operationId: updateSessionById
      tags:
        - Session
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/session.v1.json
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/session.v1.json
    delete:
      summary: Delete session by id
      description: Delete session by id
      operationId: deleteSessionById
      tags:
        - Session
      responses:
        '204':
          description: No Content
      